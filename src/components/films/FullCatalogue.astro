---
import '../../styles/variables.css';
import { formatVideoUrlByUrl } from "../../utils/googleDriveUrlFormatter.ts";
import { displayedFilms } from "../../model.ts";

---

<section class="film-catalog">
  <h2>Catalogue de Films</h2>
  <div class="recherche-container">
    <form class="recherche-form" id="search-form">
      <input
          type="text"
          placeholder="Rechercher un film..."
          class="recherche-input"
          aria-label="Rechercher un film"
          id="search-input"
      />
      <button type="submit" class="recherche-button">Rechercher</button>
    </form>
  </div>
  <div class="film-grid" id="film-grid">
    {displayedFilms.map(film => (
        <div class="film-card" data-title={film.titre.toLowerCase()}>
          <div class="video-thumbnail">
              {film.videoUrl && (
                  <iframe
                      src={formatVideoUrlByUrl(film.videoUrl)}
                      title={film.titre}
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                      allowfullscreen
                      loading="lazy"
                  ></iframe>
              )}
          </div>
          <h3>{film.titre}</h3>
        </div>
    ))}
  </div>
</section>

<style>
  .film-catalog {
    padding: 20px;
    border-radius: 8px;
    max-width: var(--maxWidth);
    margin: 20px auto;
  }
  
  /* Recherche input styles */
  .film-catalog .recherche-container {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
  }

  .recherche-container .recherche-form {
    display: flex;
    gap: 10px;
    width: 100%;
  }

  .recherche-form .recherche-input {
    padding: 10px;
    border: 1px solid var(--light-contrast-over-background-medium);
    background-color: var(--light-background-color);
    border-radius: 4px;
    width: inherit;
    color: var(--light-text-over-background);
  }

  .recherche-form .recherche-button {
    color: var(--light-search-button-color);
    background-color: var(--light-search-button-background-color);
    border: 1px solid var(--light-search-button-border-color);
    border-radius: 4px;
    padding: 10px 15px;
    cursor: pointer;
    height: 50px;
    width: 150px;
  }

  .recherche-form .recherche-button:hover {
    color: var(--light-search-button-hover-color);
    background-color: var(--light-search-button-background-hover-color);
    border-color: var(--light-search-button-border-hover-color);
  }

  /* Film grid styles */
  .film-catalog .film-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
    gap: 20px;
  }

  .film-grid .film-card {
    background-color: var(--light-film-card-desc);
    color: var(--alwaysLightGray);
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s;
  }

  .film-grid .film-card:hover {
    transform: scale(1.02);
  }

  .film-card .video-thumbnail {
    aspect-ratio: 16 / 9;
    width: 100%;
    overflow: hidden;
    border-radius: 8px;
    background: var(--light-contrast-over-background-large);
  }

  .film-card .video-thumbnail iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  /* Text and mobile styles */
  .film-catalog h2 {
    color: var(--light-contrast-over-background-large);
  }

  .film-card h3 {
    padding: 5px;
    margin-left: 15px;
    font-size: 1rem;
  }

  @media (max-width: 768px) {
    .film-catalog .film-grid {
      display: grid;
      grid-template-columns: none;
      gap: 20px;
    }
    
    .film-catalog {
      padding: 20px;
      padding-top: 40px;
      padding-bottom: 0px;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const input = document.getElementById("search-input") as HTMLInputElement | null;
    const form = document.getElementById("search-form") as HTMLFormElement | null;
    const films = document.querySelectorAll<HTMLElement>(".film-card");

    if (!input || !form) return;

    form.addEventListener("submit", (e) => e.preventDefault());

    input.addEventListener("input", () => {
      const query = input.value.toLowerCase().trim();
      films.forEach((card) => {
        const title = card.getAttribute("data-title") || "";
        card.style.display = title.includes(query) ? "block" : "none";
      });
    });
  });
</script>